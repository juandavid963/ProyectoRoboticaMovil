CCS PCM C Compiler, Version 4.023, 11770               15-jun-16 20:54

               Filename: C:\Users\JuanCq\Documents\ProyectoRobotica\PIC_C\Final\Pic1\Pic1.lst

               ROM used: 1488 words (18%)
                         Largest free fragment is 2048
               RAM used: 59 (16%) at main() level
                         77 (21%) worst case
               Stack:    2 worst case (1 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   2DF
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   036
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.5
0020:  GOTO   023
0021:  BTFSC  0C.5
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   05F
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   03C
.................... #INCLUDE <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //Cristal 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT 
.................... #USE delay(clock=20000000) 
*
0087:  MOVLW  4D
0088:  MOVWF  04
0089:  BCF    03.7
008A:  MOVF   00,W
008B:  BTFSC  03.2
008C:  GOTO   09A
008D:  MOVLW  06
008E:  MOVWF  78
008F:  CLRF   77
0090:  DECFSZ 77,F
0091:  GOTO   090
0092:  DECFSZ 78,F
0093:  GOTO   08F
0094:  MOVLW  7B
0095:  MOVWF  77
0096:  DECFSZ 77,F
0097:  GOTO   096
0098:  DECFSZ 00,F
0099:  GOTO   08D
009A:  BCF    0A.3
009B:  BCF    0A.4
009C:  GOTO   359 (RETURN)
.................... #USE rs232(BAUD=9600,XMIT=PIN_C6,RCV=PIN_C7,BITS=8) 
....................  
.................... // variables recepcion serial 
.................... int a=0;                 // contador de recepcion 
*
02F2:  BCF    03.5
02F3:  CLRF   28
.................... char dato_in[4];         // # de datos que recibo 
.................... int band_recepcion=0;    // bandera de recepcion 
02F4:  CLRF   2D
.................... int band_conexion=0;     // bandera de conexion 
02F5:  CLRF   2E
....................  
.................... // variable transmicion serial 
.................... int i=0; 
02F6:  CLRF   2F
.................... char s[5]; 
.................... unsigned int dato1=1; 
02F7:  MOVLW  01
02F8:  MOVWF  35
.................... unsigned int dato2=1; 
02F9:  MOVWF  36
....................  
.................... // variables de direccion 
.................... signed int longitudinal=0,lateral=0,orientacion=0; 
02FA:  CLRF   37
02FB:  CLRF   38
02FC:  CLRF   39
.................... double adelante_derecha=0,adelante_izquierda=0,atras_derecha=0,atras_izquierda=0; 
02FD:  CLRF   3A
02FE:  CLRF   3B
02FF:  CLRF   3C
0300:  CLRF   3D
0301:  CLRF   3E
0302:  CLRF   3F
0303:  CLRF   40
0304:  CLRF   41
0305:  CLRF   42
0306:  CLRF   43
0307:  CLRF   44
0308:  CLRF   45
0309:  CLRF   46
030A:  CLRF   47
030B:  CLRF   48
030C:  CLRF   49
....................  
.................... // variables de tiempo 
.................... long int preescaler=0;       // aumenta la interrupcion de tmr0 
030D:  CLRF   4A
030E:  CLRF   4B
....................  
....................  
.................... // interrupcion dato recibido por comunicacion serial 
.................... #INT_RDA  
.................... void rda() 
.................... {     
....................    while(kbhit()) 
....................    {  dato_in[a]=getc();                              // obtener dato serial 
*
003C:  BTFSS  0C.5
003D:  GOTO   05B
003E:  MOVLW  29
003F:  ADDWF  28,W
0040:  MOVWF  04
0041:  BCF    03.7
0042:  BTFSS  0C.5
0043:  GOTO   042
0044:  MOVF   1A,W
0045:  MOVWF  00
....................       if(dato_in[a]==255) {dato_in[0]=255; a=0;}      // si el dato leido es 255, ordene la cadena empezando en 0   
0046:  MOVLW  29
0047:  ADDWF  28,W
0048:  MOVWF  04
0049:  BCF    03.7
004A:  INCFSZ 00,W
004B:  GOTO   04F
004C:  MOVLW  FF
004D:  MOVWF  29
004E:  CLRF   28
....................       a++;                                            // aumente el contador de la cadena 
004F:  INCF   28,F
....................       if(a==4)                                        // si ha llegado al maximo empieze nuevamente 
0050:  MOVF   28,W
0051:  SUBLW  04
0052:  BTFSS  03.2
0053:  GOTO   05A
....................        { a=0;                                         // reinicie el contador 
0054:  CLRF   28
....................          if(dato_in[0]==255)  
0055:  INCFSZ 29,W
0056:  GOTO   05A
....................          { 
....................             band_recepcion=1;                         // y active bandera de recepcion    
0057:  MOVLW  01
0058:  MOVWF  2D
....................             band_conexion=1;                          // y active bandera de conexion 
0059:  MOVWF  2E
....................          } 
....................        } 
....................    } 
005A:  GOTO   03C
.................... } 
....................     
.................... // interrrupcion del tiempo timer0 cada 10 ms.    
005B:  BCF    0C.5
005C:  BCF    0A.3
005D:  BCF    0A.4
005E:  GOTO   023
.................... #INT_RTCC   
.................... void rtcc() 
.................... {   
....................    set_timer0(60); 
005F:  MOVLW  3C
0060:  MOVWF  01
....................    if(preescaler<9) preescaler++;     // 9->100ms  99->1s 999->10s 
0061:  MOVF   4B,F
0062:  BTFSS  03.2
0063:  GOTO   06C
0064:  MOVF   4A,W
0065:  SUBLW  08
0066:  BTFSS  03.0
0067:  GOTO   06C
0068:  INCF   4A,F
0069:  BTFSC  03.2
006A:  INCF   4B,F
....................    else 
006B:  GOTO   083
....................    { 
....................       if(band_conexion==0) 
006C:  MOVF   2E,F
006D:  BTFSS  03.2
006E:  GOTO   080
....................          { 
....................             output_low(pin_A1);  // apago el motor igualando 
006F:  BSF    03.5
0070:  BCF    05.1
0071:  BCF    03.5
0072:  BCF    05.1
....................             output_low(pin_A2);  // la direccion 
0073:  BSF    03.5
0074:  BCF    05.2
0075:  BCF    03.5
0076:  BCF    05.2
....................             output_low(pin_A3);  // apago el motor igualando 
0077:  BSF    03.5
0078:  BCF    05.3
0079:  BCF    03.5
007A:  BCF    05.3
....................             output_low(pin_A5);  // la direccion            
007B:  BSF    03.5
007C:  BCF    05.5
007D:  BCF    03.5
007E:  BCF    05.5
....................          } 
....................       else band_conexion=0; 
007F:  GOTO   081
0080:  CLRF   2E
....................       preescaler=0; 
0081:  CLRF   4B
0082:  CLRF   4A
....................    } 
.................... } 
....................  
.................... // funcion decodificar 
0083:  BCF    0B.2
0084:  BCF    0A.3
0085:  BCF    0A.4
0086:  GOTO   023
.................... signed int decod(char m) 
.................... { 
....................    if(m<=254) m=m-127; 
*
009D:  MOVF   4D,W
009E:  SUBLW  FE
009F:  BTFSS  03.0
00A0:  GOTO   0A3
00A1:  MOVLW  7F
00A2:  SUBWF  4D,F
....................    return m;   
00A3:  MOVF   4D,W
00A4:  MOVWF  78
.................... } 
00A5:  RETLW  00
....................  
.................... // funcion codificar 
.................... int codifica(double n) 
.................... { 
.................... return (int)((n+210)*0.607); 
.................... } 
....................  
....................  
.................... void main(void) 
.................... {  output_low(pin_C4);             // apago xbee 
*
02DF:  CLRF   04
02E0:  BCF    03.7
02E1:  MOVLW  1F
02E2:  ANDWF  03,F
02E3:  MOVLW  81
02E4:  BSF    03.5
02E5:  MOVWF  19
02E6:  MOVLW  A6
02E7:  MOVWF  18
02E8:  MOVLW  90
02E9:  BCF    03.5
02EA:  MOVWF  18
02EB:  BSF    03.5
02EC:  BSF    1F.0
02ED:  BSF    1F.1
02EE:  BSF    1F.2
02EF:  BCF    1F.3
02F0:  MOVLW  07
02F1:  MOVWF  1C
*
030F:  MOVLW  FF
0310:  MOVWF  4C
0311:  BCF    4C.4
0312:  MOVF   4C,W
0313:  BSF    03.5
0314:  MOVWF  07
0315:  BCF    03.5
0316:  BCF    07.4
....................        
....................    disable_interrupts(INT_RDA);    // recepcion serial - xbee  
0317:  BSF    03.5
0318:  BCF    0C.5
....................    disable_interrupts(INT_RTCC);   // interrupciones timer0  
0319:  BCF    03.5
031A:  BCF    0B.5
....................    disable_interrupts(GLOBAL);     // interrupciones globales 
031B:  BCF    0B.6
031C:  BCF    0B.7
031D:  BTFSC  0B.7
031E:  GOTO   31C
....................     
....................    Port_B_Pullups(FALSE);          // resistencias Pullups desactivadas 
031F:  BSF    03.5
0320:  BSF    01.7
....................  
....................    output_low(pin_A1);  // apago el motor igualando 
0321:  BCF    05.1
0322:  BCF    03.5
0323:  BCF    05.1
....................    output_low(pin_A2);  // la direccion 
0324:  BSF    03.5
0325:  BCF    05.2
0326:  BCF    03.5
0327:  BCF    05.2
....................    output_low(pin_A3);  // apago el motor igualando 
0328:  BSF    03.5
0329:  BCF    05.3
032A:  BCF    03.5
032B:  BCF    05.3
....................    output_low(pin_A5);  // la direccion 
032C:  BSF    03.5
032D:  BCF    05.5
032E:  BCF    03.5
032F:  BCF    05.5
....................        
....................    // Configuracion PWM 
....................    setup_timer_2 (T2_DIV_BY_16,240,1); // Configuracion PWM - T2_DISABLED, T2_DIV_BY_1, T2_DIV_BY_4, T2_DIV_BY_16  5(NO) 50(mejoro) 240() 
0330:  MOVLW  00
0331:  MOVWF  78
0332:  IORLW  06
0333:  MOVWF  12
0334:  MOVLW  F0
0335:  BSF    03.5
0336:  MOVWF  12
....................    setup_ccp2(CCP_PWM);                // CCP_PWM CCP_PWM_PLUS_1 CCP_PWM_PLUS_2  CCP_PWM_PLUS_3 
0337:  BCF    03.5
0338:  BCF    4C.1
0339:  MOVF   4C,W
033A:  BSF    03.5
033B:  MOVWF  07
033C:  BCF    03.5
033D:  BCF    07.1
033E:  MOVLW  0C
033F:  MOVWF  1D
....................    setup_ccp1(CCP_PWM);                // CCP_PWM CCP_PWM_PLUS_1 CCP_PWM_PLUS_2  CCP_PWM_PLUS_3 
0340:  BCF    4C.2
0341:  MOVF   4C,W
0342:  BSF    03.5
0343:  MOVWF  07
0344:  BCF    03.5
0345:  BCF    07.2
0346:  MOVLW  0C
0347:  MOVWF  17
....................    set_pwm1_duty(0);                   // inicializo en 0 
0348:  CLRF   15
....................    set_pwm2_duty(0);                   // inicializo en 0 
0349:  CLRF   1B
....................  
....................    setup_timer_0(RTCC_DIV_256);        // Configuracion Timer0 RTCC_DIV_2, RTCC_DIV_4, RTCC_DIV_8, RTCC_DIV_16, RTCC_DIV_32, RTCC_DIV_64, RTCC_DIV_128, RTCC_DIV_256 
034A:  BSF    03.5
034B:  MOVF   01,W
034C:  ANDLW  C0
034D:  IORLW  07
034E:  MOVWF  01
....................     
....................    enable_interrupts(INT_RTCC);     // habilito interrupcione timer0 
034F:  BCF    03.5
0350:  BSF    0B.5
....................    enable_interrupts(INT_RDA);      // recepcion serial - xbee 
0351:  BSF    03.5
0352:  BSF    0C.5
....................    enable_interrupts(GLOBAL);       // interrupciones globales 
0353:  MOVLW  C0
0354:  BCF    03.5
0355:  IORWF  0B,F
....................    delay_ms(100); 
0356:  MOVLW  64
0357:  MOVWF  4D
0358:  GOTO   087
....................    output_high(pin_C4);             // enciendo xbee 
0359:  BCF    4C.4
035A:  MOVF   4C,W
035B:  BSF    03.5
035C:  MOVWF  07
035D:  BCF    03.5
035E:  BSF    07.4
....................    set_timer0(60);                  // Se inicializa y empiea a contar (0-255) 
035F:  MOVLW  3C
0360:  MOVWF  01
....................     
....................    while(1) 
....................       { 
....................                 
....................          if(band_recepcion==1) 
0361:  DECFSZ 2D,W
0362:  GOTO   5CE
....................             {                  
....................                output_toggle(pin_C5); 
0363:  BCF    4C.5
0364:  MOVF   4C,W
0365:  BSF    03.5
0366:  MOVWF  07
0367:  MOVLW  20
0368:  BCF    03.5
0369:  XORWF  07,F
....................                 
....................                longitudinal=decod(dato_in[1]); 
036A:  MOVF   2A,W
036B:  MOVWF  4D
036C:  CALL   09D
036D:  MOVF   78,W
036E:  MOVWF  37
....................                lateral=decod(dato_in[2]); 
036F:  MOVF   2B,W
0370:  MOVWF  4D
0371:  CALL   09D
0372:  MOVF   78,W
0373:  MOVWF  38
....................                orientacion=decod(dato_in[3]); 
0374:  MOVF   2C,W
0375:  MOVWF  4D
0376:  CALL   09D
0377:  MOVF   78,W
0378:  MOVWF  39
....................                 
....................                //movimientos llantas                
....................                adelante_derecha=((double)longitudinal-(double)lateral-(double)orientacion); 
0379:  CLRF   56
037A:  MOVF   37,W
037B:  MOVWF  55
037C:  BTFSC  55.7
037D:  DECF   56,F
037E:  CALL   0A6
037F:  MOVF   77,W
0380:  MOVWF  4D
0381:  MOVF   78,W
0382:  MOVWF  4E
0383:  MOVF   79,W
0384:  MOVWF  4F
0385:  MOVF   7A,W
0386:  MOVWF  50
0387:  CLRF   56
0388:  MOVF   38,W
0389:  MOVWF  55
038A:  BTFSC  55.7
038B:  DECF   56,F
038C:  CALL   0A6
038D:  BSF    03.1
038E:  MOVF   50,W
038F:  MOVWF  58
0390:  MOVF   4F,W
0391:  MOVWF  57
0392:  MOVF   4E,W
0393:  MOVWF  56
0394:  MOVF   4D,W
0395:  MOVWF  55
0396:  MOVF   7A,W
0397:  MOVWF  5C
0398:  MOVF   79,W
0399:  MOVWF  5B
039A:  MOVF   78,W
039B:  MOVWF  5A
039C:  MOVF   77,W
039D:  MOVWF  59
039E:  CALL   0CB
039F:  MOVF   77,W
03A0:  MOVWF  51
03A1:  MOVF   78,W
03A2:  MOVWF  52
03A3:  MOVF   79,W
03A4:  MOVWF  53
03A5:  MOVF   7A,W
03A6:  MOVWF  54
03A7:  CLRF   56
03A8:  MOVF   39,W
03A9:  MOVWF  55
03AA:  BTFSC  55.7
03AB:  DECF   56,F
03AC:  CALL   0A6
03AD:  BSF    03.1
03AE:  MOVF   54,W
03AF:  MOVWF  58
03B0:  MOVF   53,W
03B1:  MOVWF  57
03B2:  MOVF   52,W
03B3:  MOVWF  56
03B4:  MOVF   51,W
03B5:  MOVWF  55
03B6:  MOVF   7A,W
03B7:  MOVWF  5C
03B8:  MOVF   79,W
03B9:  MOVWF  5B
03BA:  MOVF   78,W
03BB:  MOVWF  5A
03BC:  MOVF   77,W
03BD:  MOVWF  59
03BE:  CALL   0CB
03BF:  MOVF   7A,W
03C0:  MOVWF  3D
03C1:  MOVF   79,W
03C2:  MOVWF  3C
03C3:  MOVF   78,W
03C4:  MOVWF  3B
03C5:  MOVF   77,W
03C6:  MOVWF  3A
....................                adelante_izquierda=((double)longitudinal+(double)lateral+(double)orientacion); 
03C7:  CLRF   56
03C8:  MOVF   37,W
03C9:  MOVWF  55
03CA:  BTFSC  55.7
03CB:  DECF   56,F
03CC:  CALL   0A6
03CD:  MOVF   77,W
03CE:  MOVWF  4D
03CF:  MOVF   78,W
03D0:  MOVWF  4E
03D1:  MOVF   79,W
03D2:  MOVWF  4F
03D3:  MOVF   7A,W
03D4:  MOVWF  50
03D5:  CLRF   56
03D6:  MOVF   38,W
03D7:  MOVWF  55
03D8:  BTFSC  55.7
03D9:  DECF   56,F
03DA:  CALL   0A6
03DB:  BCF    03.1
03DC:  MOVF   50,W
03DD:  MOVWF  58
03DE:  MOVF   4F,W
03DF:  MOVWF  57
03E0:  MOVF   4E,W
03E1:  MOVWF  56
03E2:  MOVF   4D,W
03E3:  MOVWF  55
03E4:  MOVF   7A,W
03E5:  MOVWF  5C
03E6:  MOVF   79,W
03E7:  MOVWF  5B
03E8:  MOVF   78,W
03E9:  MOVWF  5A
03EA:  MOVF   77,W
03EB:  MOVWF  59
03EC:  CALL   0CB
03ED:  MOVF   77,W
03EE:  MOVWF  51
03EF:  MOVF   78,W
03F0:  MOVWF  52
03F1:  MOVF   79,W
03F2:  MOVWF  53
03F3:  MOVF   7A,W
03F4:  MOVWF  54
03F5:  CLRF   56
03F6:  MOVF   39,W
03F7:  MOVWF  55
03F8:  BTFSC  55.7
03F9:  DECF   56,F
03FA:  CALL   0A6
03FB:  BCF    03.1
03FC:  MOVF   54,W
03FD:  MOVWF  58
03FE:  MOVF   53,W
03FF:  MOVWF  57
0400:  MOVF   52,W
0401:  MOVWF  56
0402:  MOVF   51,W
0403:  MOVWF  55
0404:  MOVF   7A,W
0405:  MOVWF  5C
0406:  MOVF   79,W
0407:  MOVWF  5B
0408:  MOVF   78,W
0409:  MOVWF  5A
040A:  MOVF   77,W
040B:  MOVWF  59
040C:  CALL   0CB
040D:  MOVF   7A,W
040E:  MOVWF  41
040F:  MOVF   79,W
0410:  MOVWF  40
0411:  MOVF   78,W
0412:  MOVWF  3F
0413:  MOVF   77,W
0414:  MOVWF  3E
....................                atras_derecha=((double)longitudinal+(double)lateral-(double)orientacion); 
0415:  CLRF   56
0416:  MOVF   37,W
0417:  MOVWF  55
0418:  BTFSC  55.7
0419:  DECF   56,F
041A:  CALL   0A6
041B:  MOVF   77,W
041C:  MOVWF  4D
041D:  MOVF   78,W
041E:  MOVWF  4E
041F:  MOVF   79,W
0420:  MOVWF  4F
0421:  MOVF   7A,W
0422:  MOVWF  50
0423:  CLRF   56
0424:  MOVF   38,W
0425:  MOVWF  55
0426:  BTFSC  55.7
0427:  DECF   56,F
0428:  CALL   0A6
0429:  BCF    03.1
042A:  MOVF   50,W
042B:  MOVWF  58
042C:  MOVF   4F,W
042D:  MOVWF  57
042E:  MOVF   4E,W
042F:  MOVWF  56
0430:  MOVF   4D,W
0431:  MOVWF  55
0432:  MOVF   7A,W
0433:  MOVWF  5C
0434:  MOVF   79,W
0435:  MOVWF  5B
0436:  MOVF   78,W
0437:  MOVWF  5A
0438:  MOVF   77,W
0439:  MOVWF  59
043A:  CALL   0CB
043B:  MOVF   77,W
043C:  MOVWF  51
043D:  MOVF   78,W
043E:  MOVWF  52
043F:  MOVF   79,W
0440:  MOVWF  53
0441:  MOVF   7A,W
0442:  MOVWF  54
0443:  CLRF   56
0444:  MOVF   39,W
0445:  MOVWF  55
0446:  BTFSC  55.7
0447:  DECF   56,F
0448:  CALL   0A6
0449:  BSF    03.1
044A:  MOVF   54,W
044B:  MOVWF  58
044C:  MOVF   53,W
044D:  MOVWF  57
044E:  MOVF   52,W
044F:  MOVWF  56
0450:  MOVF   51,W
0451:  MOVWF  55
0452:  MOVF   7A,W
0453:  MOVWF  5C
0454:  MOVF   79,W
0455:  MOVWF  5B
0456:  MOVF   78,W
0457:  MOVWF  5A
0458:  MOVF   77,W
0459:  MOVWF  59
045A:  CALL   0CB
045B:  MOVF   7A,W
045C:  MOVWF  45
045D:  MOVF   79,W
045E:  MOVWF  44
045F:  MOVF   78,W
0460:  MOVWF  43
0461:  MOVF   77,W
0462:  MOVWF  42
....................                atras_izquierda=((double)longitudinal-(double)lateral+(double)orientacion); 
0463:  CLRF   56
0464:  MOVF   37,W
0465:  MOVWF  55
0466:  BTFSC  55.7
0467:  DECF   56,F
0468:  CALL   0A6
0469:  MOVF   77,W
046A:  MOVWF  4D
046B:  MOVF   78,W
046C:  MOVWF  4E
046D:  MOVF   79,W
046E:  MOVWF  4F
046F:  MOVF   7A,W
0470:  MOVWF  50
0471:  CLRF   56
0472:  MOVF   38,W
0473:  MOVWF  55
0474:  BTFSC  55.7
0475:  DECF   56,F
0476:  CALL   0A6
0477:  BSF    03.1
0478:  MOVF   50,W
0479:  MOVWF  58
047A:  MOVF   4F,W
047B:  MOVWF  57
047C:  MOVF   4E,W
047D:  MOVWF  56
047E:  MOVF   4D,W
047F:  MOVWF  55
0480:  MOVF   7A,W
0481:  MOVWF  5C
0482:  MOVF   79,W
0483:  MOVWF  5B
0484:  MOVF   78,W
0485:  MOVWF  5A
0486:  MOVF   77,W
0487:  MOVWF  59
0488:  CALL   0CB
0489:  MOVF   77,W
048A:  MOVWF  51
048B:  MOVF   78,W
048C:  MOVWF  52
048D:  MOVF   79,W
048E:  MOVWF  53
048F:  MOVF   7A,W
0490:  MOVWF  54
0491:  CLRF   56
0492:  MOVF   39,W
0493:  MOVWF  55
0494:  BTFSC  55.7
0495:  DECF   56,F
0496:  CALL   0A6
0497:  BCF    03.1
0498:  MOVF   54,W
0499:  MOVWF  58
049A:  MOVF   53,W
049B:  MOVWF  57
049C:  MOVF   52,W
049D:  MOVWF  56
049E:  MOVF   51,W
049F:  MOVWF  55
04A0:  MOVF   7A,W
04A1:  MOVWF  5C
04A2:  MOVF   79,W
04A3:  MOVWF  5B
04A4:  MOVF   78,W
04A5:  MOVWF  5A
04A6:  MOVF   77,W
04A7:  MOVWF  59
04A8:  CALL   0CB
04A9:  MOVF   7A,W
04AA:  MOVWF  49
04AB:  MOVF   79,W
04AC:  MOVWF  48
04AD:  MOVF   78,W
04AE:  MOVWF  47
04AF:  MOVF   77,W
04B0:  MOVWF  46
....................  
....................  
....................                if (longitudinal==124 && lateral==124 && orientacion==124) 
04B1:  MOVF   37,W
04B2:  SUBLW  7C
04B3:  BTFSS  03.2
04B4:  GOTO   4CE
04B5:  MOVF   38,W
04B6:  SUBLW  7C
04B7:  BTFSS  03.2
04B8:  GOTO   4CE
04B9:  MOVF   39,W
04BA:  SUBLW  7C
04BB:  BTFSS  03.2
04BC:  GOTO   4CE
....................                   { 
....................                      output_low(pin_A1);  // apago el motor igualando 
04BD:  BSF    03.5
04BE:  BCF    05.1
04BF:  BCF    03.5
04C0:  BCF    05.1
....................                      output_low(pin_A2);  // la direccion 
04C1:  BSF    03.5
04C2:  BCF    05.2
04C3:  BCF    03.5
04C4:  BCF    05.2
....................                      output_low(pin_A3);  // apago el motor igualando 
04C5:  BSF    03.5
04C6:  BCF    05.3
04C7:  BCF    03.5
04C8:  BCF    05.3
....................                      output_low(pin_A5);  // la direccion                                   
04C9:  BSF    03.5
04CA:  BCF    05.5
04CB:  BCF    03.5
04CC:  BCF    05.5
....................                   } 
....................                else if (longitudinal==123 && lateral==123 && orientacion==123) 
04CD:  GOTO   5CD
04CE:  MOVF   37,W
04CF:  SUBLW  7B
04D0:  BTFSS  03.2
04D1:  GOTO   4EB
04D2:  MOVF   38,W
04D3:  SUBLW  7B
04D4:  BTFSS  03.2
04D5:  GOTO   4EB
04D6:  MOVF   39,W
04D7:  SUBLW  7B
04D8:  BTFSS  03.2
04D9:  GOTO   4EB
....................                   { 
....................                      output_low(pin_A1);  // apago el motor igualando 
04DA:  BSF    03.5
04DB:  BCF    05.1
04DC:  BCF    03.5
04DD:  BCF    05.1
....................                      output_low(pin_A2);  // la direccion 
04DE:  BSF    03.5
04DF:  BCF    05.2
04E0:  BCF    03.5
04E1:  BCF    05.2
....................                      output_low(pin_A3);  // apago el motor igualando 
04E2:  BSF    03.5
04E3:  BCF    05.3
04E4:  BCF    03.5
04E5:  BCF    05.3
....................                      output_low(pin_A5);  // la direccion   
04E6:  BSF    03.5
04E7:  BCF    05.5
04E8:  BCF    03.5
04E9:  BCF    05.5
....................                   } 
....................                else 
04EA:  GOTO   5CD
....................                   {                                                                   
....................                      //velocidad del motor 1 
....................                      if (atras_izquierda<0) {output_high(pin_A3); output_low(pin_A5);} 
04EB:  MOVF   49,W
04EC:  MOVWF  54
04ED:  MOVF   48,W
04EE:  MOVWF  53
04EF:  MOVF   47,W
04F0:  MOVWF  52
04F1:  MOVF   46,W
04F2:  MOVWF  51
04F3:  CLRF   58
04F4:  CLRF   57
04F5:  CLRF   56
04F6:  CLRF   55
04F7:  CALL   20C
04F8:  BTFSS  03.0
04F9:  GOTO   503
04FA:  BSF    03.5
04FB:  BCF    05.3
04FC:  BCF    03.5
04FD:  BSF    05.3
04FE:  BSF    03.5
04FF:  BCF    05.5
0500:  BCF    03.5
0501:  BCF    05.5
....................                      else                   {output_high(pin_A5); output_low(pin_A3);}   
0502:  GOTO   50B
0503:  BSF    03.5
0504:  BCF    05.5
0505:  BCF    03.5
0506:  BSF    05.5
0507:  BSF    03.5
0508:  BCF    05.3
0509:  BCF    03.5
050A:  BCF    05.3
....................                      if (abs(atras_izquierda)>127) atras_izquierda=127; 
050B:  MOVF   46,W
050C:  MOVWF  77
050D:  MOVF   47,W
050E:  MOVWF  78
050F:  MOVF   48,W
0510:  MOVWF  79
0511:  MOVF   49,W
0512:  MOVWF  7A
0513:  BCF    78.7
0514:  MOVF   46,W
0515:  MOVWF  4D
0516:  MOVF   78,W
0517:  MOVWF  4E
0518:  MOVF   48,W
0519:  MOVWF  4F
051A:  MOVF   49,W
051B:  MOVWF  50
051C:  CLRF   54
051D:  CLRF   53
051E:  MOVLW  7E
051F:  MOVWF  52
0520:  MOVLW  85
0521:  MOVWF  51
0522:  MOVF   49,W
0523:  MOVWF  58
0524:  MOVF   48,W
0525:  MOVWF  57
0526:  MOVF   78,W
0527:  MOVWF  56
0528:  MOVF   46,W
0529:  MOVWF  55
052A:  CALL   20C
052B:  BTFSS  03.0
052C:  GOTO   533
052D:  CLRF   49
052E:  CLRF   48
052F:  MOVLW  7E
0530:  MOVWF  47
0531:  MOVLW  85
0532:  MOVWF  46
....................                      set_pwm1_duty(((int)(((float)(abs(atras_izquierda))*2.00)))); 
0533:  MOVF   46,W
0534:  MOVWF  77
0535:  MOVF   47,W
0536:  MOVWF  78
0537:  MOVF   48,W
0538:  MOVWF  79
0539:  MOVF   49,W
053A:  MOVWF  7A
053B:  BCF    78.7
053C:  MOVF   46,W
053D:  MOVWF  4D
053E:  MOVF   78,W
053F:  MOVWF  4E
0540:  MOVF   48,W
0541:  MOVWF  4F
0542:  MOVF   49,W
0543:  MOVWF  50
0544:  MOVWF  54
0545:  MOVF   48,W
0546:  MOVWF  53
0547:  MOVF   78,W
0548:  MOVWF  52
0549:  MOVF   46,W
054A:  MOVWF  51
054B:  CLRF   58
054C:  CLRF   57
054D:  CLRF   56
054E:  MOVLW  80
054F:  MOVWF  55
0550:  CALL   24B
0551:  MOVF   7A,W
0552:  MOVWF  54
0553:  MOVF   79,W
0554:  MOVWF  53
0555:  MOVF   78,W
0556:  MOVWF  52
0557:  MOVF   77,W
0558:  MOVWF  51
0559:  CALL   2C0
055A:  MOVF   78,W
055B:  MOVWF  15
....................                       
....................                      // velocidad del motor 2                              
....................                      if (adelante_izquierda<0)   {output_high(pin_A2); output_low(pin_A1);} 
055C:  MOVF   41,W
055D:  MOVWF  54
055E:  MOVF   40,W
055F:  MOVWF  53
0560:  MOVF   3F,W
0561:  MOVWF  52
0562:  MOVF   3E,W
0563:  MOVWF  51
0564:  CLRF   58
0565:  CLRF   57
0566:  CLRF   56
0567:  CLRF   55
0568:  CALL   20C
0569:  BTFSS  03.0
056A:  GOTO   574
056B:  BSF    03.5
056C:  BCF    05.2
056D:  BCF    03.5
056E:  BSF    05.2
056F:  BSF    03.5
0570:  BCF    05.1
0571:  BCF    03.5
0572:  BCF    05.1
....................                      else                        {output_high(pin_A1); output_low(pin_A2);} 
0573:  GOTO   57C
0574:  BSF    03.5
0575:  BCF    05.1
0576:  BCF    03.5
0577:  BSF    05.1
0578:  BSF    03.5
0579:  BCF    05.2
057A:  BCF    03.5
057B:  BCF    05.2
....................                      if (abs(adelante_izquierda)>127) adelante_izquierda=127; 
057C:  MOVF   3E,W
057D:  MOVWF  77
057E:  MOVF   3F,W
057F:  MOVWF  78
0580:  MOVF   40,W
0581:  MOVWF  79
0582:  MOVF   41,W
0583:  MOVWF  7A
0584:  BCF    78.7
0585:  MOVF   3E,W
0586:  MOVWF  4D
0587:  MOVF   78,W
0588:  MOVWF  4E
0589:  MOVF   40,W
058A:  MOVWF  4F
058B:  MOVF   41,W
058C:  MOVWF  50
058D:  CLRF   54
058E:  CLRF   53
058F:  MOVLW  7E
0590:  MOVWF  52
0591:  MOVLW  85
0592:  MOVWF  51
0593:  MOVF   41,W
0594:  MOVWF  58
0595:  MOVF   40,W
0596:  MOVWF  57
0597:  MOVF   78,W
0598:  MOVWF  56
0599:  MOVF   3E,W
059A:  MOVWF  55
059B:  CALL   20C
059C:  BTFSS  03.0
059D:  GOTO   5A4
059E:  CLRF   41
059F:  CLRF   40
05A0:  MOVLW  7E
05A1:  MOVWF  3F
05A2:  MOVLW  85
05A3:  MOVWF  3E
....................                      set_pwm2_duty(((int)(((float)(abs(adelante_izquierda))*2.00))));  
05A4:  MOVF   3E,W
05A5:  MOVWF  77
05A6:  MOVF   3F,W
05A7:  MOVWF  78
05A8:  MOVF   40,W
05A9:  MOVWF  79
05AA:  MOVF   41,W
05AB:  MOVWF  7A
05AC:  BCF    78.7
05AD:  MOVF   3E,W
05AE:  MOVWF  4D
05AF:  MOVF   78,W
05B0:  MOVWF  4E
05B1:  MOVF   40,W
05B2:  MOVWF  4F
05B3:  MOVF   41,W
05B4:  MOVWF  50
05B5:  MOVWF  54
05B6:  MOVF   40,W
05B7:  MOVWF  53
05B8:  MOVF   78,W
05B9:  MOVWF  52
05BA:  MOVF   3E,W
05BB:  MOVWF  51
05BC:  CLRF   58
05BD:  CLRF   57
05BE:  CLRF   56
05BF:  MOVLW  80
05C0:  MOVWF  55
05C1:  CALL   24B
05C2:  MOVF   7A,W
05C3:  MOVWF  54
05C4:  MOVF   79,W
05C5:  MOVWF  53
05C6:  MOVF   78,W
05C7:  MOVWF  52
05C8:  MOVF   77,W
05C9:  MOVWF  51
05CA:  CALL   2C0
05CB:  MOVF   78,W
05CC:  MOVWF  1B
....................                } 
....................                  
....................                band_recepcion=0;                       
05CD:  CLRF   2D
....................             }                                 
....................       } 
05CE:  GOTO   361
.................... } 
05CF:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
